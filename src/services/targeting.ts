import produce from 'immer'

import { throwError } from '../Errors'

/**
 * A client that immitates a typical gRPC-web client as generated by protoc-gen-grpc-web
 */
export default async function getClient() {
	return {
		getCategories: categories.readMany,
		getCategory: categories.readOne,
		updateCategory: categories.update,
		logClick: categories.logClick,
	}
}

export interface Category {
	id: number
	tag: string
	clickCount: number
}

class Categories {
	categories: readonly Category[] = [
		{
			id: 0,
			tag: 'automotive',
			clickCount: 0,
		},
		{
			id: 1,
			tag: 'auto-body-styles',
			clickCount: 0,
		},
	]
	constructor() {
		this.readMany = this.readMany.bind(this)
		this.readOne = this.readOne.bind(this)
		this.update = this.update.bind(this)
		this.logClick = this.logClick.bind(this)
	}
	async readMany(props: Record<string, unknown>) {
		return this.categories
	}
	async readOne({id}: {id: Category['id']}) {
		return this.categories.find(c => c.id === id) || throwError('404: Category not found')
	}
	async update({id, ...updates}: Partial<Category> & Pick<Category, 'id'>) {
		console.log(`${getFncName()} was called`)
		this.categories = produce(this.categories, draft => {
			const cat = draft.find(c => c.id === id) || throwError('404: Category not found')
			Object.assign(cat, updates)
		})
		return this.readOne({id})
	}
	async logClick({id}: {id: Category['id']}) {
		console.log(`${getFncName()} was called`)
		this.categories = produce(this.categories, draft => {
			const cat = draft.find(c => c.id === id) || throwError('404: Category not found')
			cat.clickCount++
		})
		return this.readOne({id})
	}
}
const categories = new Categories()

function getFncName() {
	const stackLine = (new Error())!.stack!.split('\n')[2].trim()
	const fncName = stackLine.match(/at Object.([^ ]+)/)?.[1] ?? 'anonymous'
	return fncName
}
